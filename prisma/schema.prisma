// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Disease {
  id            String         @id @default(uuid())
  name          String
  description   String?
  patients      Patient[]
  prescriptions Prescription[]
}

model Medicine {
  id            String         @id @default(uuid())
  name          String
  patients      Patient[]
  prescriptions Prescription[]
}

model Prescription {
  id            String                @id @default(uuid())
  dignose       String
  requriedRays  String?
  requiredTests String?
  medicines     Medicine[]
  diseases      Disease[]
  consultation  OfflineConsultation[]
}

model Patient {
  id                         String                @id @default(uuid())
  firstName                  String
  midName                    String?
  lastName                   String
  gender                     GENDER?
  nationalId                 String?
  bloodGroup                 String?
  weight                     String?
  height                     String?
  age                        Int?
  isBlocked                  Boolean               @default(false)
  email                      String                @unique
  password                   String
  resetPasswordToken         DateTime?
  resertPasswordTokenExpires DateTime?
  doctorReviews              DoctorReview[]
  patientReports             PatientReports[]
  previousDiseases           Disease[]
  previousMedicines          Medicine[]
  offlineConsultations       OfflineConsultation[]
  onlineConsultations        OnlineConsultations[]
}

model DoctorReview {
  id          String  @id @default(uuid())
  rate        Int
  title       String?
  description String?
  doctor      Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId    String
  Patient     Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId   String
}

model PatientReports {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor      Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patientId   String
  doctorId    String
}

model Doctor {
  id                         String                @id @default(uuid())
  firstName                  String
  midName                    String?
  lastName                   String
  gender                     GENDER
  nationalId                 String?
  email                      String                @unique
  password                   String
  isBlocked                  Boolean               @default(false)
  isVeriyfied                Boolean               @default(false)
  onlineExaminationPrice     Int?
  resetPasswordToken         DateTime?
  resertPasswordTokenExpires DateTime?
  reviews                    DoctorReview[]
  certificates               Certificate[]
  clincs                     Clinc[]
  onlineWorkAppointments     WorkAppointments[]
  specialization             MedicalSpecialization @relation(fields: [medicalSpecializationId], references: [id])
  medicalSpecializationId    String
  patientReports             PatientReports[]
  onlineConsultations        OnlineConsultations[]
}

model MedicalSpecialization {
  id          String   @id @default(uuid())
  title       String
  description String?
  doctors     Doctor[]
}

model Clinc {
  id               String                @id @default(uuid())
  name             String
  phone            String?
  address          String?
  reservationPrice Int?
  doctor           Doctor                @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId         String
  workAppointments WorkAppointments[]
  consultations    OfflineConsultation[]
}

model WorkAppointments {
  id       String  @id @default(uuid())
  day      String
  from     String
  to       String
  clinc    Clinc?  @relation(fields: [clincId], references: [id])
  clincId  String?
  doctor   Doctor? @relation(fields: [doctorId], references: [id])
  doctorId String?
}

model Certificate {
  id          String  @id @default(uuid())
  destination String
  imageUrl    String?
  doctor      Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId    String
}

model OfflineConsultation {
  id             String        @id @default(uuid())
  appointment    DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  clinc          Clinc         @relation(fields: [clincId], references: [id], onDelete: Cascade)
  clincId        String
  patient        Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId      String
  prescription   Prescription? @relation(fields: [prescriptionId], references: [id])
  prescriptionId String?       @unique
}

model OnlineConsultations {
  id          String   @id @default(uuid())
  appointment DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  doctor      Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId    String
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId   String
  chat        Chat?
}

model Chat {
  id                    String              @id @default(uuid())
  name                  String?
  messages              Message[]
  consultation          OnlineConsultations @relation(fields: [onlineConsultationsId], references: [id], onDelete: Cascade)
  onlineConsultationsId String              @unique
}

model Message {
  id              String   @id @default(uuid())
  content         String?
  attachedFileUrl String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Chat            Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId          String
  senderId        String
}

model Admin {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
}

enum GENDER {
  MALE
  FEMALE
}

view User {
  id       String @unique
  email    String @unique
  password String
  role     String
}

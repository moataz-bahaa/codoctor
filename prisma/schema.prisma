generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Disease {
  id            String         @id @default(uuid())
  name          String
  description   String?
  patients      Patient[]
  prescriptions Prescription[]

  @@map("diseases")
}

model Medicine {
  id            String         @id @default(uuid())
  name          String
  patients      Patient[]
  prescriptions Prescription[]

  @@map("medicines")
}

model Prescription {
  id            String                @id @default(uuid())
  dignose       String
  requriedRays  String?
  requiredTests String?
  medicines     Medicine[]
  diseases      Disease[]
  consultation  OfflineConsultation[]

  @@map("prescriptions")
}

model Patient {
  id                         String                @id @default(uuid())
  firstName                  String
  midName                    String?
  lastName                   String
  gender                     GENDER?
  nationalId                 String?
  bloodGroup                 String?
  weight                     String?
  height                     String?
  age                        Int?
  isBlocked                  Boolean               @default(false)
  email                      String                @unique
  password                   String
  resetPasswordToken         DateTime?
  resertPasswordTokenExpires DateTime?
  doctorReviews              DoctorReview[]
  patientReports             PatientReports[]
  previousDiseases           Disease[]
  previousMedicines          Medicine[]
  offlineConsultations       OfflineConsultation[]
  onlineConsultations        OnlineConsultations[]

  @@map("patients")
}

model DoctorReview {
  id          String  @id @default(uuid())
  rate        Int
  title       String?
  description String?
  doctor      Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId    String
  patient     Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId   String

  @@map("doctors_reviews")
}

model PatientReports {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor      Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patientId   String
  doctorId    String

  @@map("patient_reports")
}

model Doctor {
  id                         String                @id @default(uuid())
  firstName                  String
  midName                    String?
  lastName                   String
  gender                     GENDER
  nationalId                 String?
  email                      String                @unique
  password                   String
  isBlocked                  Boolean               @default(false)
  isVeriyfied                Boolean               @default(false)
  onlineExaminationPrice     Int?
  resetPasswordToken         DateTime?
  resertPasswordTokenExpires DateTime?
  reviews                    DoctorReview[]
  certificates               Certificate[]
  clincs                     Clinc[]
  onlineWorkAppointments     WorkAppointments[]
  specialization             MedicalSpecialization @relation(fields: [medicalSpecializationId], references: [id])
  medicalSpecializationId    String
  patientReports             PatientReports[]
  onlineConsultations        OnlineConsultations[]

  @@map("doctors")
}

model MedicalSpecialization {
  id          String   @id @default(uuid())
  title       String
  description String?
  doctors     Doctor[]

  @@map("medical_specializations")
}

model Clinc {
  id               String                @id @default(uuid())
  name             String
  phone            String?
  address          String?
  reservationPrice Int?
  doctor           Doctor                @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId         String
  workAppointments WorkAppointments[]
  consultations    OfflineConsultation[]

  @@map("clincs")
}

model WorkAppointments {
  id       String  @id @default(uuid())
  day      String
  from     String
  to       String
  clinc    Clinc?  @relation(fields: [clincId], references: [id])
  clincId  String?
  doctor   Doctor? @relation(fields: [doctorId], references: [id])
  doctorId String?

  @@map("work_appointments")
}

model Certificate {
  id          String  @id @default(uuid())
  destination String
  imageUrl    String?
  doctor      Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId    String

  @@map("certificates")
}

model OfflineConsultation {
  id             String        @id @default(uuid())
  appointment    DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  clinc          Clinc         @relation(fields: [clincId], references: [id], onDelete: Cascade)
  clincId        String
  patient        Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId      String
  prescription   Prescription? @relation(fields: [prescriptionId], references: [id])
  prescriptionId String?       @unique

  @@map("offline_consultations")
}

model OnlineConsultations {
  id          String   @id @default(uuid())
  appointment DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  doctor      Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId    String
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId   String
  chat        Chat?

  @@map("online_consultations")
}

model Chat {
  id   String  @id @default(uuid())
  name String?


  messages     Message[]
  consultation OnlineConsultations @relation(fields: [onlineConsultationsId], references: [id], onDelete: Cascade)

  onlineConsultationsId String @unique

  @@map("chats")
}

model Message {
  id              String   @id @default(uuid())
  content         String?
  attachedFileUrl String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  chat            Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId          String
  
  senderId        String

  @@map("messages")
}

model Admin {
  id        String  @id @default(uuid())
  firstName String
  midName   String?
  lastName  String
  email     String  @unique
  password  String

  @@map("admins")
}

enum GENDER {
  male
  female
}

view User {
  id        String  @unique
  email     String  @unique
  password  String
  firstName String
  midName   String?
  lastName  String
  role      String

  @@map("users")
}

view DoctorDetails {
  id                    String  @unique
  firstName             String
  midName               String?
  lastName              String
  rate                  Int?
  medicalSpecialization String

  @@map("doctors_view")
}
